Plans 2

Assets:
 - Assets will be the building block for rendering anything. 
	- Assets come in different types:
		- Generated assets: (a done and finished product being used as part of a scene)
			- Texture
			- Mesh
			- Shader
			- Bone
			- Animation
		- Descriptive assets: (implies interpreting a file to generate code that will display something) (this asset type might not be necessary at all, as doing this you might as well be creating your own mod)
			- Framebuffer "desc"
				Would simply be a declaration of the framebuffer, the size and what attachments are part of it. None of the attachments can be shared with other FBOs, but can be blitted or rendered onto another
			- Rendering pipeline "desc"
				Would resemble assembly, in a sense. With "memory" and "cache" location and instructions
	- An asset provider will be used to provide assets. This way assets are not loaded multiple times
	- ISerialize (which assets will use) in C# 7 can use a static Deserialize interface method
 - Data can be transferred, but OGL cannot leave the module, so assets and entity data determines rendering.
 - Rendering special stuff like particles and ui?
	Allow scenes to be injected into the pipeline? The scene resolves all assets, meaning no OGL will be called.






























Meshes:

Needs {
	VAO
	VBOs {
		Indirect data
		Mesh data {
			Vertex data
			Index data
		}
		Instance Data
	}
}

BufferObject {
	Allocated memory on CPU side
	Can be read from by multiple threads at once
	Can only be written to by one thread at once
	Tightly controlled data. Cannot be accessed without creating a partition.
	Events fire indicating changes has been made to the allocated memory, listeners can do with it what they want.
	A method to read from the pointer without accessing the pointer outside the buffer must exist.
}

VBO {
	Allocated memory on GPU side
	Can only be written to. The data in the VBO comes from BufferObjects. It is synchronized every frame.
	Listens to the bufferobject, any changes registered is enqueued, and each frame the queue is emptied.

}

Vao {
	Instead of defining VAO based on struct types, define them based on VAO prototype factories, constructing parts of a VAO. A mesh should have the vertex data setup, while the scene data should have the instance data setup
}

SceneObjects should have a bind
