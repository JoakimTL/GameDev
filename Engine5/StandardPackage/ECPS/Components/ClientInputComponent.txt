//namespace StandardPackage.ECPS.Components;
//public class ClientInputComponent {

//	//TODO: contain a list of input at any given subtick. This means when an input event occurs the input is added to this list. At any call to fetch the list it is then stored elsewhere and tracked as the input for that tick. After some time this list is removed from the input history. (Or maybe not?)
//	//TODO: clients can be authoritative, but are largely relegated to be authoritative on their local ECS, then when the server wants to know if there is any new data the client will simply respond with what it is authorized to send. Any illegal data transfers will be noted in the server log. There might be a setting for this, which determines if the server will kick the client or not.
//	//TODO: Servers are authoritative on everything the client is not. This means all components the client does not have authority over the server will process and update the client on. The server can assume the client has the same deterministic components and systems as the server, and thus sending and update every time a deterministic movement happens is not needed, however when something new happens the clients must be informed, usually with the new state of everything affected by this event.
//	//TODO: This class is actually bogus right now. Clients should be able to have flexibility in their input, which means this component needs to be general (a dictionary with input ("move forward", "move backward", etc.. not W down or S down). The client should have very few authoritative components, and this is one of them. The client should be able to have a component that is authoritative over the input, and then the server can use this component to determine what the client is doing. This means the client can have a component that is authoritative over the input, and then the server can use this component to determine what the client is doing. This means the client can have a component that is authoritative over the input, and then the server can use this component to determine what the client is doing.
//	//TODO: study ECS and networking more. This is a very important part of the engine and needs to be done right. 


//	/*
//CoPilot answers:

//Q: I want to have ECS and Multiplayer working as expected, what do I need to implement this correctly?
//To implement ECS and Multiplayer in your project, you would need to follow some steps:
//	1.	Create a network architecture that can handle multiplayer transport. This can be done in a number of ways, but typically UDP is used for game data and control data is sent via TCP. You may also want to consider a robust solution for handling connections, such as NAT hole punching if you are implementing peer-to-peer architecture.
//	2.	You would need to implement a serialization system that can handle efficient and deterministic data transfer. This can be done by using binary serialization or other specialized serialization methods based on the types of data that need to be transferred between the client and server.
//	3.	You need to carefully design your network synchronization system to send and update data between the clients and server. ECS requires careful management of state and events, so you will need to make sure that you are only synchronizing state that is required and minimizing network traffic.
//	4.	When designing the ECS architecture, it is important to consider how data will be updated by various systems, and how these systems will collaborate and share data between them. This can be done by ensuring that each system operates on independent components, which allows them to be updated in parallel, thus promoting efficient use of the CPU.
//	5.	Consider how state updates are processed. A reliable approach to this is by having servers authoritative as they govern the actions of the clients. The client managing components it has authority over and the server managing all the other components (in ECS terms entities) and then notify the clients of the current state they are required or authorized to know.

//Q: How do I design my network synchronization system?
//To design a network synchronization system, you'll need to start by carefully designing your network synchronization system to send and update data between the clients and server. ECS requires careful management of state and events, so you will need to make sure that you are only synchronizing state that is required and minimizing network traffic. This can be achieved by:
//1.	Identifying the authoritative source: Determines which entity owns the component, and who has the authority to change its state. Typically, the authoritative source is a game client or server, depending on the case.
//2.	Establishing the update cycle: The update cycle determines how often the server updates client state.
//3.	Managing network traffic: The network traffic must be minimized, which requires careful state management and efficient message serialization and sender/receiver implementation.
//Once you have identified which components both the server and client will be updating, you should then synchronize these components between the two systems. In addition to this, It is important to maintain a well-structured ECS architecture, which promotes efficient CPU use across systems that operate independently on entities. By ensuring that each system operates on independent components, and operating the same way on either the server or the client, efficient CPU usage is promoted. Ultimately when design synchronization of entities, states, and events between the server and client, the server should always have authority over the actions of the clients. The client manages components it has authority over while the server manages all other components and then notifies the clients of the current state they are required or authorized to know.
//I'm not quite sure how to explain that code, would you like something else explained, or can I provide further detail on the discussed topic?

//Q: Can you explain more about the update cycle?
//Sure, the update cycle determines how often the server updates client state. This cycle depends on various factors, such as network latency, server load, and client demand. It is generally desirable to minimize the update frequency to reduce network traffic, but it is essential to balance this with the need for timely and accurate updates.
//One typical way to implement a server update cycle is to use a fixed time interval, such as every 50 or 100 milliseconds. At each interval, the server polls its clients for any changes in their state and sends any necessary updates. The server can also use predictive algorithms to forecast changes before they occur, so the client's state can be updated proactively, resulting in smoother gameplay and a better player experience.
//It is also essential to consider how the update cycle operates within your ECS architecture. The cycle should be designed to minimize conflicts between systems and entities and promote efficient CPU usage. This can be done by organizing your codebase into independent components and ensuring that these components operate independently of each other.  By designing these components properly, the update cycle can be made more efficient, and gameplay will be smoother.
//Would you like me to provide any more information on this topic?

//Q: How do I design my ECS architecture
//To design an ECS architecture, you should follow these steps:
//1.	First, identify all of the components that will form the basis of your ECS. These components should be as minimal as possible, and each should represent a single piece of game data that can be used by one or more systems.
//2.	Replace complex inheritance hierarchies with component-based objects. In an ECS, entities are made up of a collection of components. Each component holds a portion of the data representing the larger entity, allowing for more flexible behavior and easy reusability.
//3.	Create systems that operate on collections of components relevant to the operation of that system. Systems can subscribe to notifications whenever a component is added/removed from an entity to know when to add/remove an entity to this system's subscription list, and then operate on them as required.
//4.	Consider your data structures, ensuring efficient storage and retrieval of components and to minimize contention between lock-free access.
//5.	Manage state updates. It is critical to have clear policies for entity and component creation, modification, and removal. One practical implementation involves using an event-based mechanism, whereby the game entities emit events on state changes, and system subscribe to those events to operate on the relevant entities.
//Overall, keep an eye on your system's performance and restructure as needed to improve performance and facilitate future development.
//I hope this helps! Can I provide more information or help on this topic?
//	 */

//}
